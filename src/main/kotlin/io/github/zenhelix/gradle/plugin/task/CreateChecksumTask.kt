package io.github.zenhelix.gradle.plugin.task

import io.github.zenhelix.gradle.plugin.utils.mavenPublication
import java.io.File
import java.nio.charset.StandardCharsets
import java.util.Locale
import org.gradle.api.DefaultTask
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.RegularFile
import org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver
import org.gradle.api.provider.ListProperty
import org.gradle.api.provider.Property
import org.gradle.api.provider.Provider
import org.gradle.api.publish.plugins.PublishingPlugin.PUBLISH_TASK_GROUP
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.OutputFiles
import org.gradle.api.tasks.TaskAction
import org.gradle.internal.hash.HashFunction
import org.gradle.internal.hash.Hashing
import org.gradle.kotlin.dsl.listProperty
import org.gradle.kotlin.dsl.withType
import org.gradle.plugins.signing.Sign

/**
 * Task that creates checksum files for all artifacts in a Maven publication.
 *
 * This task generates MD5, SHA1, SHA256, and SHA512 checksums for each artifact,
 * excluding signature files that are generated by the signing plugin.
 *
 * The task is cacheable and incremental, meaning it will only regenerate checksums
 * when the input artifacts have changed.
 *
 * Configuration of this task should be done externally by the plugin or build script,
 * not by the task itself. Use the configureFromMavenPublication() utility function
 * for proper configuration.
 */
@CacheableTask
public abstract class CreateChecksumTask : DefaultTask() {

    /**
     * The name of the Maven publication to generate checksums for.
     */
    @get:Input
    public abstract val publicationName: Property<String>

    /**
     * List of artifact information corresponding to input artifacts.
     * This is derived from the configured publication and input files.
     */
    @get:Input
    public abstract val artifactInfos: ListProperty<ArtifactInfo>

    /**
     * The directory where checksum files will be generated.
     */
    @get:OutputDirectory
    public abstract val outputDirectory: DirectoryProperty

    /**
     * Provider of all checksum files that will be generated by this task.
     * This allows other tasks to depend on specific checksum files rather than the entire output directory.
     */
    @get:OutputFiles
    public val checksumFiles: ListProperty<RegularFile> = project.objects.listProperty<RegularFile>().apply {
        set(artifactInfos.zip(outputDirectory) { artifacts, outDir ->
            artifacts
                .filter { artifact -> artifact.file().exists() }
                .flatMap { artifact ->
                    CHECKSUM_ALGORITHMS.map { hashFunction ->
                        val artifactFile = artifact.file()
                        val artifactParentDir = artifactFile.parentFile?.name ?: "artifacts"
                        val checksumDir = outDir.asFile
                        val targetDir = File(checksumDir, artifactParentDir)
                        val algorithmSuffix = hashFunction.algorithm.lowercase(Locale.ROOT).replace("-", "")
                        val checksumFileName = "${artifact.artifactName}.$algorithmSuffix"
                        project.layout.projectDirectory.file(File(targetDir, checksumFileName).absolutePath)
                    }
                }
        })
    }

    init {
        group = PUBLISH_TASK_GROUP
        description = "Generates checksum files for Maven publication artifacts"

        outputDirectory.convention(project.layout.buildDirectory.dir("checksums"))
    }

    @TaskAction
    public fun createChecksums() {
        val artifacts = artifactInfos.get()
        if (artifacts.isEmpty()) {
            logger.info("No artifacts configured for checksum generation")
            return
        }

        artifacts
            .filter { artifact -> artifact.file().exists() }
            .forEach { artifact ->
                CHECKSUM_ALGORITHMS.forEach { hashFunction ->
                    val checksumFile = getChecksumFile(artifact, hashFunction)
                    checksumFile.parentFile.mkdirs()
                    checksumFile.writeBytes(generateChecksum(artifact.file(), hashFunction))
                }
            }

    }

    public fun configureFromMavenPublication(publicationName: String) {
        val signatureFilesProvider: Provider<Set<File>> = project.providers.provider {
            project.tasks.withType<Sign>().flatMap { it.signatureFiles }.toSet()
        }

        this.artifactInfos.set(project.mavenPublication(publicationName).flatMap { publication ->
            signatureFilesProvider.map { signatureFiles ->
                publication.publishableArtifacts
                    .filterNot { signatureFiles.contains(it.file) }
                    .map { ArtifactInfo(ArtifactFileInfo.of(it), GAV.of(publication)) }
            }
        })
    }

    /**
     * Generates the checksum for a file using the specified hash function.
     */
    private fun generateChecksum(file: File, hashFunction: HashFunction): ByteArray {
        val hash = hashFunction.hashFile(file)
        val formattedHashString = hash.toZeroPaddedString(hashFunction.hexDigits)
        return formattedHashString.toByteArray(StandardCharsets.US_ASCII)
    }

    /**
     * Gets the checksum file location for an artifact and hash function.
     * Maintains the directory structure relative to the build directory.
     */
    private fun getChecksumFile(artifact: ArtifactInfo, hashFunction: HashFunction): File {
        val artifactFile = artifact.file()
        val artifactParentDir = artifactFile.parentFile?.name ?: "artifacts"

        val checksumDir = outputDirectory.get().asFile
        val targetDir = File(checksumDir, artifactParentDir)

        val algorithmSuffix = hashFunction.algorithm.lowercase(Locale.ROOT).replace("-", "")
        val checksumFileName = "${artifact.artifactName}.$algorithmSuffix"

        return File(targetDir, checksumFileName)
    }

    private companion object {
        /**
         * Set of checksum algorithms to generate.
         * Includes MD5 and SHA1 (always), plus SHA256 and SHA512 if not disabled by Gradle.
         */
        private val CHECKSUM_ALGORITHMS = setOf(Hashing.sha1(), Hashing.md5()).let { basicAlgorithms ->
            basicAlgorithms + if (!ExternalResourceResolver.disableExtraChecksums()) {
                setOf(Hashing.sha256(), Hashing.sha512())
            } else {
                emptySet()
            }
        }
    }
}